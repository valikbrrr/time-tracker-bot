// src/conversations/createNewProject
import { MyConversation, MyContextConversation } from "../myContext";
import { InlineKeyboard } from "grammy";
import { authenticate } from "../googleSheets/authenticate";
import { timeTrackerProjModel } from "../db/modelProject";
import { createProjectProvider } from "../providers/createProjectProvider";

export async function createNewProject(conversation: MyConversation, ctx: MyContextConversation) {

    const inlineKeyboard = new InlineKeyboard()
        .text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "nextStepCreateProject").row()
        .text("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "BackToCreateProject");
        
    const nameOfNewProject = await conversation.wait();
    const projectName = nameOfNewProject.message?.text; 

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
    await ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: "${projectName}" ü•≥`, {
        reply_markup: inlineKeyboard
    });
    
    const callbackQuery = await conversation.waitForCallbackQuery(["nextStepCreateProject", "BackToCreateProject"]);
    if (callbackQuery.callbackQuery.data === "nextStepCreateProject") {

        const inlineKeyboardTwo = new InlineKeyboard()
        .text("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "callbackOpenProjectList")
        // await callbackQuery.answerCallbackQuery();

        const NewCallbackQuery = callbackQuery.callbackQuery;

        if (!NewCallbackQuery || !NewCallbackQuery.message) {
            await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
            return;
        } 

        // console.log(NewCallbackQuery);
        const chatId = NewCallbackQuery.message?.chat.id;
        const messageId = NewCallbackQuery.message?.message_id;

        await ctx.api.editMessageText(chatId, messageId, " –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã –≤ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç", {
            reply_markup: inlineKeyboardTwo
        })

        if (projectName) {
            createProjectProvider(projectName)
        }

    } else if (callbackQuery.callbackQuery.data === "BackToCreateProject") {

        const NewCallbackQuery = callbackQuery.callbackQuery;
        
        if (!NewCallbackQuery || !NewCallbackQuery.message) {
            await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
            return;
        } 

        try {
            await callbackQuery.answerCallbackQuery();
            const chatId = NewCallbackQuery.message.chat.id;
            const messageId = NewCallbackQuery.message.message_id;
    
            await ctx.api.editMessageText(chatId, messageId, `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`);
        } catch (error) {
            // console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    
        await createNewProject(conversation, ctx);
    }
}

