import { MyConversation, MyContextConversation } from "../myContext";
import { InlineKeyboard } from "grammy";

export async function createNewProject(conversation: MyConversation, ctx: MyContextConversation) {
    const inlineKeyboard = new InlineKeyboard()
        .text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "nextStepCreate").row()
        .text("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "BackToCreateProject");
        
    const nameOfNewProject = await conversation.wait();
    await ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: "${nameOfNewProject.message?.text}" ü•≥`, {
        reply_markup: inlineKeyboard
    });
    
    const callbackQuery = await conversation.waitForCallbackQuery(["nextStepCreate", "BackToCreateProject"]);
    if (callbackQuery.callbackQuery.data === "nextStepCreate") {
        await callbackQuery.answerCallbackQuery();
        await ctx.reply("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?‚è∞");

        let hoursOfNewProj: string | undefined;

        while (true) {
            const response = await conversation.wait();
            hoursOfNewProj = response.message?.text;

            if (hoursOfNewProj && /^(?:[1-9]|[1-9]\d|[1-5]\d{2}|6[0-9]{2}|7[0-4][0-4])$/.test(hoursOfNewProj)) {
                break
            } else {
                await ctx.reply(`–ö–æ–ª-–≤–æ —á–∞—Å–æ–≤ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –æ—Ç 1 –¥–æ 744.`);
            }
        }
        await ctx.reply(`–í—ã –≤–≤–µ–ª–∏: ${hoursOfNewProj}. –≠—Ç–æ –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ!`);
    } else if (callbackQuery.callbackQuery.data === "BackToCreateProject") {
        await callbackQuery.answerCallbackQuery();
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`);
        await createNewProject(conversation, ctx);
    }
}