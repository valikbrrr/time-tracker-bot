import { Api, Bot, Context, GrammyError, HttpError, InlineKeyboard, Keyboard, session } from "grammy";
import {
    type Conversation,
    type ConversationFlavor,
    conversations,
    createConversation,
} from "@grammyjs/conversations";
import { hydrate, HydrateFlavor} from "@grammyjs/hydrate";

type MyContextConversation = Context & ConversationFlavor;
type MyConversation = Conversation<MyContextConversation>;

type MyContextHydrate = HydrateFlavor<Context>;

const bot = new Bot<MyContextConversation & MyContextHydrate >(process.env.TELEGRAM_TOKEN || "");


bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
  },
  {
    command: "my_id",
    description: "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π id"
  },
  {
    command: "support",
    description: "–ü–æ–º–æ—â—å"
  },
])

// regex
// –æ—Ç–¥–µ–ª–µ–Ω–∏–µ 1 –æ—Ç 2 

async function selectMonth(conversation: MyConversation, ctx: MyContextConversation) {
    await ctx.reply("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?‚è∞");
    const hoursInMonth = await conversation.wait();
    await ctx.reply(`–≠—Ç–æ –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ!`);
}

async function inputInterval(conversation: MyConversation, ctx: MyContextConversation) {
  const interval = await conversation.wait();
  await ctx.reply("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏?‚è∞");
  const hoursInInterval = await conversation.wait();
  await ctx.reply(`–≠—Ç–æ –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ!`);
}

async function selectProject(conversation: MyConversation, ctx: MyContextConversation) {
  await ctx.reply("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?‚è∞");
  const hoursOfProject = await conversation.wait();
  await ctx.reply(`–≠—Ç–æ –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ!`);
}

async function createNewProject(conversation: MyConversation, ctx: MyContextConversation) {
  const inlineKeyboard = new InlineKeyboard()
    .text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "nextStepCreate").row()
    .text("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "BackToCreateProject")
  const nameOfNewProject = await conversation.wait();
  await ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: "${nameOfNewProject.message?.text}" ü•≥`, {
    reply_markup: inlineKeyboard
  });
  const callbackQuery = await conversation.waitForCallbackQuery(["nextStepCreate", "BackToCreateProject"]);
  if (callbackQuery.callbackQuery.data === "nextStepCreate") {
    await callbackQuery.answerCallbackQuery()
    await ctx.reply("–ö–∞–∫–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞–¥ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?‚è∞");
    const hoursOfProject = await conversation.wait();
    await ctx.reply(`–≠—Ç–æ –≤—Å—ë, —Å–ø–∞—Å–∏–±–æ!`);
  } else if (callbackQuery.callbackQuery.data === "BackToCreateProject") {
    await callbackQuery.answerCallbackQuery()
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`);
    await createNewProject(conversation, ctx);
  }
}


bot.use(session({ initial: () => ({}) }));
bot.use(conversations());
bot.use(hydrate())

bot.use(createConversation(selectMonth));
bot.use(createConversation(inputInterval));
bot.use(createConversation(selectProject));
bot.use(createConversation(createNewProject));

const whitelist = [1958491438, 882091398, 837291475];

bot.use((ctx: Context, next) => {
  const userId = ctx.from?.id;
  if (userId && whitelist.includes(userId)) {
    return next(); 
  } else {
    return ctx.reply("–í–∞–º –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω");
  }
});

bot.command("start", async (ctx) => {
  const choiceDirection = new Keyboard()
    .text("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –º–µ—Å—è—Ü–∞–º").row()
    .text("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º")
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏", {
  reply_markup:  choiceDirection
  })
})

bot.command("my_id", async (ctx) => {
  await ctx.reply(`–í–æ—Ç –≤–∞—à id: ${ctx.from?.id}`)
})

bot.command("support", async (ctx) => {
  await ctx.reply(`–ü–æ–∫–∞ —è –Ω–∏—á–µ–º –Ω–µ –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—åüòî`)
})

bot.hears("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –º–µ—Å—è—Ü–∞–º", async (ctx) => {
  const timeMonth = new Keyboard()
    .text("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã (id = –º–µ—Å—è—Ü)").row()
    .text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∞—Å—ã (id = –º–µ—Å—è—Ü)")
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞", {
    reply_markup:  timeMonth
  })
})

bot.hears("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º", async (ctx) => {
  const timeProject = new Keyboard()
    .text("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã (id = –ø—Ä–æ–µ–∫—Ç)").row()
    .text("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∞—Å—ã (id = –ø—Ä–æ–µ–∫—Ç)")
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞", {
    reply_markup:  timeProject
  })
})

bot.hears("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã (id = –º–µ—Å—è—Ü)", async (ctx) => {
  const inputOptionsKeyboard = new Keyboard()
    .text("–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞").row()
    .text("–í–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    .oneTime()
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏", {
    reply_markup: inputOptionsKeyboard
  })
})

bot.hears("–í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("—è–Ω–≤–∞—Ä—å", "—è–Ω–≤–∞—Ä—å")
    .text("—Ñ–µ–≤—Ä–∞–ª—å", "—Ñ–µ–≤—Ä–∞–ª—å")
    .text("–º–∞—Ä—Ç", "–º–∞—Ä—Ç")
    .text("–∞–ø—Ä–µ–ª—å", "–∞–ø—Ä–µ–ª—å").row()
    .text("–º–∞–π", "–º–∞–π")
    .text("–∏—é–Ω—å", "–∏—é–Ω—å")
    .text("–∏—é–ª—å", "–∏—é–ª—å")
    .text("–∞–≤–≥—É—Å—Ç", "–∞–≤–≥—É—Å—Ç").row()
    .text("—Å–µ–Ω—Ç—è–±—Ä—å", "—Å–µ–Ω—Ç—è–±—Ä—å")
    .text("–æ–∫—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å")
    .text("–Ω–æ—è–±—Ä—å", "–Ω–æ—è–±—Ä—å")
    .text("–¥–µ–∫–∞–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å")
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞:", {
    reply_markup: inlineKeyboard
  })
})

bot.hears("–í–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª", async (ctx) => {
  await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ªüòä`)
  await ctx.conversation.enter(`inputInterval`)
})

bot.hears("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∞—Å—ã (id = –º–µ—Å—è—Ü)", async (ctx) => {
const inputHistoryMonth = new Keyboard()
  .text("–ï—â—ë –¥—É–º–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º...ü§î")
  .oneTime()
await ctx.reply("–¢—É—Ç –º—ã –µ—â—ë –Ω–µ —Ä–µ—à–∏–ª–∏", {
  reply_markup:  inputHistoryMonth
})
})

bot.hears("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—ã (id = –ø—Ä–æ–µ–∫—Ç)", async (ctx) => {
  const projectSelectOrCreate = new Keyboard()
    .text("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤").row()
    .text("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    .oneTime()
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—ÇüôÉ", {
    reply_markup:  projectSelectOrCreate
  })
})

bot.hears("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∞—Å—ã (id = –ø—Ä–æ–µ–∫—Ç)", async (ctx) => {
  const inputHistoryMonth = new Keyboard()
    .text("–ï—â—ë –¥—É–º–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º...ü§î")
    .oneTime()
  await ctx.reply("–¢—É—Ç –º—ã –µ—â—ë –Ω–µ —Ä–µ—à–∏–ª–∏", {
    reply_markup:  inputHistoryMonth
  })
})

bot.hears("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("*–ø—Ä–æ–µ–∫—Ç 1*", "project-1")
    .text("*–ø—Ä–æ–µ–∫—Ç 2*", "project-2")
    .text("*–ø—Ä–æ–µ–∫—Ç 3*", "project-3")
    .text("*–ø—Ä–æ–µ–∫—Ç 4*", "project-4")
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç", {
    reply_markup:  inlineKeyboard
  })
})

bot.hears("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", async (ctx) => {
  await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:`)
  await ctx.conversation.enter(`createNewProject`)
})

bot.callbackQuery(["project-1", "project-2", "project-3", "project-4"], async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "nextStepProject",).row()
    .text("< –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", "backToProjects")
  await ctx.callbackQuery.message?.editText(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${ctx.callbackQuery.data}`, {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery("nextStepProject", async (ctx) => {
  await ctx.conversation.enter("selectProject");
  await ctx.answerCallbackQuery()
})

bot.callbackQuery("backToProjects", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("*–ø—Ä–æ–µ–∫—Ç 1*", "project-1")
    .text("*–ø—Ä–æ–µ–∫—Ç 2*", "project-2")
    .text("*–ø—Ä–æ–µ–∫—Ç 3*", "project-3")
    .text("*–ø—Ä–æ–µ–∫—Ç 4*", "project-4")
  await ctx.callbackQuery.message?.editText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç", {
    reply_markup:  inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.callbackQuery([ "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å" ], async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "nextStepMonth").row()
    .text("< –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞", "backToMonths")
  await ctx.callbackQuery.message?.editText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü: ${ctx.callbackQuery.data}`, {
    reply_markup: inlineKeyboard
  },)
  await ctx.answerCallbackQuery()
})

bot.callbackQuery("nextStepMonth", async (ctx) => {
  await ctx.conversation.enter("selectMonth");
  await ctx.answerCallbackQuery()
})

bot.callbackQuery("backToMonths", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("—è–Ω–≤–∞—Ä—å", "—è–Ω–≤–∞—Ä—å")
    .text("—Ñ–µ–≤—Ä–∞–ª—å", "—Ñ–µ–≤—Ä–∞–ª—å")
    .text("–º–∞—Ä—Ç", "–º–∞—Ä—Ç")
    .text("–∞–ø—Ä–µ–ª—å", "–∞–ø—Ä–µ–ª—å").row()
    .text("–º–∞–π", "–º–∞–π")
    .text("–∏—é–Ω—å", "–∏—é–Ω—å")
    .text("–∏—é–ª—å", "–∏—é–ª—å")
    .text("–∞–≤–≥—É—Å—Ç", "–∞–≤–≥—É—Å—Ç").row()
    .text("—Å–µ–Ω—Ç—è–±—Ä—å", "—Å–µ–Ω—Ç—è–±—Ä—å")
    .text("–æ–∫—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å")
    .text("–Ω–æ—è–±—Ä—å", "–Ω–æ—è–±—Ä—å")
    .text("–¥–µ–∫–∞–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å")
  await ctx.callbackQuery.message?.editText("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞", {
    reply_markup: inlineKeyboard
  })
  await ctx.answerCallbackQuery()
})

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.on("message", async (ctx) => {
  const choiceDirection = new Keyboard()
    .text("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –º–µ—Å—è—Ü–∞–º").row()
    .text("–£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º")
  ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ...", {
    reply_markup:  choiceDirection
    })
})

bot.start()














// import { Bot, type Context, session, GrammyError, HttpError } from "grammy";
// import {
//     type Conversation,
//     type ConversationFlavor,
//     conversations,
//     createConversation,
// } from "@grammyjs/conversations";

// type MyContext = Context & ConversationFlavor;
// type MyConversation = Conversation<MyContext>;

// const bot = new Bot<MyContext>(process.env.TELEGRAM_TOKEN || "");

// async function greeting(conversation: MyConversation, ctx: MyContext) {
//     await ctx.reply("Hi there! What is your name?");
//     const { message } = await conversation.wait();
//     await ctx.reply(`Welcome to the chat, ${message?.text}!`);
// }

// bot.use(session({ initial: () => ({}) }));
// bot.use(conversations());

// bot.use(createConversation(greeting));

// bot.command("enter", async (ctx) => {
//     await ctx.reply("Entering conversation!");
//     // enter the function "greeting" you declared
//     await ctx.conversation.enter("greeting");
// });

// bot.command("start", (ctx) => ctx.reply("Hi! Send /enter"));
// bot.use((ctx) => ctx.reply("What a nice update."));

// bot.start();










